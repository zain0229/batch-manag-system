

package hgpi;


import java.sql.*;
public class NewS extends java.awt.Frame {

    /** Creates new form NewS */
    public NewS() {
        initComponents();
        try{
            Class.forName("com.mysql.jdbc.Driver");
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
        try{
            Connection c=DriverManager.getConnection("jdbc:mysql://localhost:3306/hgpi_batches?zeroDateTimeBehavior=convertToNull","root","");
            PreparedStatement p=c.prepareStatement("select crsname from courses ");
            ResultSet  r=p.executeQuery();
            while(r.next())
            {
                chcrs.add(r.getString(1));
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        label1 = new java.awt.Label();
        lblbatch2 = new java.awt.Label();
        label5 = new java.awt.Label();
        chfac = new java.awt.Choice();
        chcrs = new java.awt.Choice();
        label6 = new java.awt.Label();
        chkfac = new java.awt.Checkbox();
        button1 = new java.awt.Button();
        tffrm = new java.awt.TextField();
        label7 = new java.awt.Label();
        tfto = new java.awt.TextField();
        chktym = new java.awt.Checkbox();
        label8 = new java.awt.Label();
        chfrq = new java.awt.Choice();
        lstbatches = new java.awt.List();
        label9 = new java.awt.Label();
        lblbatch1 = new java.awt.Label();
        lstbatches1 = new java.awt.List();
        fmissing = new java.awt.Label();
        chktymt = new java.awt.Checkbox();
        lbnv = new java.awt.Label();

        setBackground(java.awt.Color.orange);
        setUndecorated(true);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
                formWindowLostFocus(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                exitForm(evt);
            }
        });
        setLayout(null);

        label1.setAlignment(java.awt.Label.CENTER);
        label1.setBackground(java.awt.Color.red);
        label1.setFont(new java.awt.Font("Comic Sans MS", 1, 18)); // NOI18N
        label1.setForeground(java.awt.Color.white);
        label1.setText("NEW STUDENT"); // NOI18N
        add(label1);
        label1.setBounds(0, 40, 600, 60);

        lblbatch2.setAlignment(java.awt.Label.CENTER);
        lblbatch2.setBackground(java.awt.Color.lightGray);
        lblbatch2.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        lblbatch2.setForeground(java.awt.Color.black);
        lblbatch2.setText("DOUBLE CLICK TO CHOOSE BATCH"); // NOI18N
        lblbatch2.setVisible(false);
        add(lblbatch2);
        lblbatch2.setBounds(420, 500, 490, 25);

        label5.setAlignment(java.awt.Label.CENTER);
        label5.setBackground(java.awt.Color.blue);
        label5.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        label5.setForeground(java.awt.Color.white);
        label5.setText("REQUIRED COURSE"); // NOI18N
        add(label5);
        label5.setBounds(40, 180, 170, 25);

        chfac.setBackground(java.awt.Color.white);
        chfac.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        chfac.setForeground(java.awt.Color.red);
        chfac.setEnabled(false);
        add(chfac);
        chfac.setBounds(660, 180, 150, 25);

        chcrs.setBackground(java.awt.Color.white);
        chcrs.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        chcrs.setForeground(java.awt.Color.red);
        chcrs.add("--select--");
        chcrs.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chcrsItemStateChanged(evt);
            }
        });
        add(chcrs);
        chcrs.setBounds(240, 180, 150, 40);

        label6.setAlignment(java.awt.Label.CENTER);
        label6.setBackground(java.awt.Color.blue);
        label6.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        label6.setForeground(java.awt.Color.white);
        label6.setText("REQUIRED SLOT TO"); // NOI18N
        add(label6);
        label6.setBounds(40, 390, 170, 25);

        chkfac.setBackground(java.awt.Color.orange);
        chkfac.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                chkfacItemStateChanged(evt);
            }
        });
        add(chkfac);
        chkfac.setBounds(840, 180, 26, 20);

        button1.setBackground(java.awt.Color.red);
        button1.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        button1.setForeground(java.awt.Color.blue);
        button1.setLabel("NEXT"); // NOI18N
        button1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                button1ActionPerformed(evt);
            }
        });
        add(button1);
        button1.setBounds(230, 460, 120, 29);

        tffrm.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        tffrm.setForeground(java.awt.Color.red);
        add(tffrm);
        tffrm.setBounds(240, 320, 50, 30);

        label7.setAlignment(java.awt.Label.CENTER);
        label7.setBackground(java.awt.Color.blue);
        label7.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        label7.setForeground(java.awt.Color.white);
        label7.setText("REQUIRED SLOT FROM"); // NOI18N
        add(label7);
        label7.setBounds(40, 320, 170, 25);

        tfto.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        tfto.setForeground(java.awt.Color.red);
        add(tfto);
        tfto.setBounds(240, 390, 50, 30);

        chktym.setLabel("AM"); // NOI18N
        add(chktym);
        chktym.setBounds(340, 320, 60, 30);

        label8.setAlignment(java.awt.Label.CENTER);
        label8.setBackground(java.awt.Color.blue);
        label8.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        label8.setForeground(java.awt.Color.white);
        label8.setText("REQUIRED FREQUENCY"); // NOI18N
        add(label8);
        label8.setBounds(40, 250, 170, 25);

        chfrq.setBackground(java.awt.Color.white);
        chfrq.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        chfrq.setForeground(java.awt.Color.red);
        chfrq.add("7");
        chfrq.add("5REG");
        chfrq.add("MWFSS");
        chfrq.add("TTHSS");
        chfrq.add("WEEKENDS");
        add(chfrq);
        chfrq.setBounds(240, 250, 150, 25);

        lstbatches.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        lstbatches.setForeground(java.awt.Color.red);
        lstbatches.setVisible(false);
        lstbatches.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                lstbatchesItemStateChanged(evt);
            }
        });
        lstbatches.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                lstbatchesActionPerformed(evt);
            }
        });
        add(lstbatches);
        lstbatches.setBounds(420, 350, 40, 150);

        label9.setAlignment(java.awt.Label.CENTER);
        label9.setBackground(java.awt.Color.blue);
        label9.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        label9.setForeground(java.awt.Color.white);
        label9.setText("FACULTY MEMBER "); // NOI18N
        add(label9);
        label9.setBounds(430, 180, 210, 25);

        lblbatch1.setAlignment(java.awt.Label.CENTER);
        lblbatch1.setBackground(java.awt.Color.blue);
        lblbatch1.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        lblbatch1.setForeground(java.awt.Color.white);
        lblbatch1.setText("BATCH DETAILS"); // NOI18N
        lblbatch1.setVisible(false);
        add(lblbatch1);
        lblbatch1.setBounds(420, 320, 490, 25);

        lstbatches1.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        lstbatches1.setForeground(java.awt.Color.red);
        lstbatches1.setVisible(false);
        add(lstbatches1);
        lstbatches1.setBounds(470, 350, 440, 150);

        fmissing.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        fmissing.setForeground(java.awt.Color.white);
        fmissing.setText("Some fields are missing, please fill them!");
        fmissing.setVisible(false);
        add(fmissing);
        fmissing.setBounds(160, 500, 300, 25);

        chktymt.setLabel("AM"); // NOI18N
        add(chktymt);
        chktymt.setBounds(340, 390, 60, 30);

        lbnv.setFont(new java.awt.Font("Comic Sans MS", 1, 14)); // NOI18N
        lbnv.setForeground(java.awt.Color.white);
        lbnv.setText("TIME ENTERED IS NOT VALID, ENTER ANY TIME BETWEEN 7AM TO 10 PM...");
        lbnv.setVisible(false);
        add(lbnv);
        lbnv.setBounds(50, 500, 570, 25);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /** Exit the Application */
    private void exitForm(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_exitForm
        System.exit(0);
    }//GEN-LAST:event_exitForm

    private void button1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_button1ActionPerformed
        // TODO add your handling code here:
        if((tffrm.getText()).equals("") || (tfto.getText()).equals(""))
        {
            fmissing.setVisible(true);
        }
        if((Integer.parseInt((tffrm.getText()))<7 && chktym.getState()==true) || ((Integer.parseInt(tfto.getText()))>10 && chktymt.getState()==false) )
        {
           lbnv.setVisible(true);
        }
        else
        {
          fmissing.setVisible(false);
        lblbatch1.setVisible(true);
        lblbatch2.setVisible(true);
        lstbatches.setVisible(true);
        lstbatches1.setVisible(true);
        try{
          Connection c=DriverManager.getConnection("jdbc:mysql://localhost:3306/hgpi_batches?zeroDateTimeBehavior=convertToNull","root","");
            PreparedStatement p=c.prepareStatement("select rtrim(bid),rtrim(bname),rtrim(totstu),rtrim(fname),rtrim(crsname),rtrim(starttime),rtrim(meridian),rtrim(endtime),rtrim(meridian_to),rtrim(ctopic) from batches b,courses c,faculty f   where b.facid=f.fid and c.crsid=b.crsid and c.crsname=? and frqncy=? and meridian=? and fname=? and starttime>=? and endtime<=? and ctopic='NEW' and totstu<maxcap and meridian_to=?");
            p.setString(1,chcrs.getSelectedItem());

            p.setString(2,chfrq.getSelectedItem());
            if(chktym.getState()==true)
            { p.setString(3,"AM");}
            else
            {
                p.setString(3, "PM");
            }
            
            p.setString(4,chfac.getSelectedItem());
            p.setInt(5,Integer.parseInt(tffrm.getText()));
            p.setInt(6,Integer.parseInt(tfto.getText()));
              if(chktymt.getState()==true)
            { p.setString(7,"AM");}
            else
            {
                p.setString(7, "PM");
            }
            ResultSet r=p.executeQuery();
            String s=chcrs.getSelectedItem();
            String fac=chfac.getSelectedItem();
                int frm=Integer.parseInt(tffrm.getText());
                int to=Integer.parseInt(tfto.getText());
                String frq=chfrq.getSelectedItem();
                boolean mer=chktym.getState();
                boolean mert=chktymt.getState();
            if(r.next())
            {
              do {

                lstbatches.add(Integer.toString(r.getInt(1)));
                lstbatches1.add(r.getString(2)+"  "+r.getInt(3)+"   "+r.getString(4)+"  "+r.getString(5)+"  "+r.getInt(6)+"   "+r.getString(7)+"     "+r.getInt(8)+"    "+r.getString(9)+"   "+r.getString(10));
            }  while(r.next());
            }
            else
            {
              
                newSnext nsn=new newSnext(frm,to,s,fac,frq,mer,mert);
               // NewBatch nb=new NewBatch(frm,to,s,frq);
             nsn.setVisible(true);
             nsn.setBounds(400, 200, 620, 300);
             this.dispose();
            }
        }
            catch(Exception e)
      {
          e.printStackTrace();
      }

            
        /*    if(r.next()==false)
            {
                String s=chcrs.getSelectedItem();
                int frm=Integer.parseInt(tffrm.getText());
                int to=Integer.parseInt(tfto.getText());
                String frq=chfrq.getSelectedItem();
                boolean mer=chktym.getState();
                newSnext nsn=new newSnext(frm,to,s,frq,mer);
               // NewBatch nb=new NewBatch(frm,to,s,frq);
             nsn.setVisible(true);
             nsn.setBounds(400, 200, 620, 300);
             this.dispose();
            }

            else{
                  
                do
           {
                lstbatches.add(Integer.toString(r.getInt(1)));
                lstbatches1.add(r.getString(2)+"  "+r.getInt(3)+"   "+r.getString(4)+"  "+r.getString(5)+"  "+r.getInt(6)+"   "+r.getInt(7)+"    "+r.getString(8)+"   "+r.getString(9));
            }while(r.next());
            }
*/
      }
      
        
    }//GEN-LAST:event_button1ActionPerformed

    private void chcrsItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chcrsItemStateChanged
        // TODO add your handling code here:
chfac.removeAll();
        try{
            Connection c=DriverManager.getConnection("jdbc:mysql://localhost:3306/hgpi_batches?zeroDateTimeBehavior=convertToNull","root","");
            PreparedStatement p=c.prepareStatement("select fname from faculty f,courses c,faculty_courses fc  where f.fid=fc.fid and c.crsid=fc.crsid and c.crsname=?");
            p.setString(1,chcrs.getSelectedItem());
            ResultSet r=p.executeQuery();
            while(r.next())
            {
                chfac.add(r.getString(1));
            }
        }
        catch(Exception e)
        {
            e.printStackTrace();
        }
    }//GEN-LAST:event_chcrsItemStateChanged

    private void chkfacItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_chkfacItemStateChanged
        // TODO add your handling code here:
        if(chkfac.getState()==true)
        {
            chfac.setEnabled(true);
        }
    }//GEN-LAST:event_chkfacItemStateChanged

    private void lstbatchesItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_lstbatchesItemStateChanged
        // TODO add your handling code here:
    }//GEN-LAST:event_lstbatchesItemStateChanged

    private void lstbatchesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_lstbatchesActionPerformed
        // TODO add your handling code here:
        int bid=Integer.parseInt(lstbatches.getSelectedItem());
        String crsnm=chcrs.getSelectedItem();

        Register r=new Register(bid,crsnm);
        r.setVisible(true);
        r.setBounds(365,60,900,700);
        this.dispose();
    }//GEN-LAST:event_lstbatchesActionPerformed

    private void formWindowLostFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowLostFocus
        // TODO add your handling code here:
        this.dispose();
    }//GEN-LAST:event_formWindowLostFocus

    /**
    * @param args the command line arguments
    */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new NewS().setVisible(true);
            }
        });
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private java.awt.Button button1;
    private java.awt.Choice chcrs;
    private java.awt.Choice chfac;
    private java.awt.Choice chfrq;
    private java.awt.Checkbox chkfac;
    private java.awt.Checkbox chktym;
    private java.awt.Checkbox chktymt;
    private java.awt.Label fmissing;
    private java.awt.Label label1;
    private java.awt.Label label5;
    private java.awt.Label label6;
    private java.awt.Label label7;
    private java.awt.Label label8;
    private java.awt.Label label9;
    private java.awt.Label lblbatch1;
    private java.awt.Label lblbatch2;
    private java.awt.Label lbnv;
    private java.awt.List lstbatches;
    private java.awt.List lstbatches1;
    private java.awt.TextField tffrm;
    private java.awt.TextField tfto;
    // End of variables declaration//GEN-END:variables

}
